/* OUTPUT_FORMAT(*elf32-h8300) */
OUTPUT_ARCH(h8300h)
ENTRY("_start")

/* MEMORYコマンドで各メモリ領域を定義する */
MEMORY
{
	/* o ... origin(開始アドレス) / l ... length(領域のサイズ)
   	   hoge( r...read, w...書き込み可能, x...実行可能 ) */
	romall(rx)	: o = 0x000000, l = 0x800000 /* 512KB */
	vectors(r)	: o = 0x000000, l = 0x000100 /* top of ROM */
	rom(rx)		: o = 0x000100, l = 0x07ff00

	ramall(rwx)	: o = 0xffbf20, l = 0x004000 /* 16KB */
	buffer(rwx)	: o = 0xffdf20, l = 0x001d00 /* 8KB 受信のためのバッファ領域*/ 
	data(rwx)	: o = 0xfffc20, l = 0x000300
	stack(rw)	: o = 0xffff00, l = 0x000000 /* end of RAM */
}

SECTIONS
{
	/* 割り込みベクタ */
	.vectors : {
		vector.o(.data)
	} > vectors

	/* テキスト領域 */
	.text : {
		_text_start = . ; /* textセクションの先頭を表すシンボルを配置 */
		*(.text)
		_etext = . ; /* textセクションの終端を指すシンボルを配置 */
	} > rom

	/* rodata ... Read Only DATA */
	.rodata : {
		_rodata_start = . ;
		*(.strings)
		*(.rodata)
		*(.rodata.*)
		_erodata = . ;
	} > rom

	/* バッファのシンボル定義を追加 */
	.buffer : {
		_buffer_start = . ;
	} > buffer

	/* データ領域 */
	.data : {
		_data_start = . ;
		*(.data)
		_edata = . ;
	} > data AT> rom /* .dataセクションの VA!=PA対応 (書き込み時はROM,起動時にRAMへロードし実行中はRAMを参照 */

	/* BSS領域 */
	.bss : {
		_bss_start = . ;
		*(.bss)
		*(COMMON)
		_ebss = . ;
	} > data AT> rom /* .bssセクションの VA!=PA対応 */

	. = ALIGN(4); /* 4バイト・アライメント */
	_end = . ;

	.stack : {
		_stack = . ;
	} > stack
}
